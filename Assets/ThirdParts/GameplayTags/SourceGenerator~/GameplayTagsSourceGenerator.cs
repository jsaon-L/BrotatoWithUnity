using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Text;

namespace BandoWare.GameplayTag.SourceGenerator
{
   [Generator]
   public class GameplayTagSourceGenerator : ISourceGenerator
   {
      public void Initialize(GeneratorInitializationContext context)
      {
         context.RegisterForSyntaxNotifications(() => new GameplayTagSyntaxReceiver());
      }

      public void Execute(GeneratorExecutionContext context)
      {
         if (context.SyntaxReceiver is not GameplayTagSyntaxReceiver receiver)
            return;

         // Dicionário para armazenar a estrutura hierárquica das tags
         TagNode rootTag = new("AllGameplayTags");

         // Process each GameplayTag attribute found by the receiver
         foreach (AttributeSyntax attribute in receiver.GameplayTagAttributes)
         {
            string? tagArgument = attribute.ArgumentList?.Arguments.FirstOrDefault()?.ToString().Trim('"');
            if (tagArgument != null)
            {
               AddTagToHierarchy(rootTag, tagArgument);
            }
         }

         // Gerar o código com base na estrutura de tags
         StringBuilder sourceBuilder = new();
         sourceBuilder.AppendLine("// <auto-generated />");
         sourceBuilder.AppendLine("namespace BandoWare.GameplayTags");
         sourceBuilder.AppendLine("{");

         // Iniciar a geração do código a partir do nó raiz
         GenerateTagClasses(sourceBuilder, rootTag, 1);

         sourceBuilder.AppendLine("}");

         // Add the generated source to the compilation
         context.AddSource("GameplayTags.g.cs", SourceText.From(sourceBuilder.ToString(), Encoding.UTF8));
      }

      private void AddTagToHierarchy(TagNode root, string tag)
      {
         string[] parts = tag.Split('.');
         TagNode currentNode = root;

         foreach (string part in parts)
         {
            if (part == "Tag")
               break;

            if (!currentNode.Children.ContainsKey(part))
            {
               currentNode.Children[part] = new TagNode(part, currentNode);
            }

            currentNode = currentNode.Children[part];
         }
      }

      private void GenerateTagClasses(StringBuilder sourceBuilder, TagNode node, int indentLevel)
      {
         string indent = new('\t', indentLevel);
         sourceBuilder.AppendLine($"{indent}internal partial class {node.Name}");
         sourceBuilder.AppendLine($"{indent}{{");

         if (node.Name != "AllGameplayTags")
         {
            string tagPath = string.Join(".", GetTagPath(node));
            sourceBuilder.AppendLine($"{indent}\tprivate static readonly GameplayTag s_Tag = GameplayTagManager.RequestTag(\"{tagPath}\");");
            sourceBuilder.AppendLine($"{indent}\tpublic static GameplayTag Get() {{ return s_Tag; }}");
         }

         indentLevel++;

         foreach (TagNode childNode in node.Children.Values)
         {
            GenerateTagClasses(sourceBuilder, childNode, indentLevel);
         }

         sourceBuilder.AppendLine(new string('\t', indentLevel - 1) + "}");
      }

      private IEnumerable<string> GetTagPath(TagNode node)
      {
         Stack<string> path = new();
         TagNode? current = node;

         while (current != null && current.Name != "AllGameplayTags")
         {
            path.Push(current.Name);
            current = current.Parent;
         }

         return path;
      }

      private class TagNode
      {
         public string Name { get; }
         public TagNode? Parent { get; set; }
         public Dictionary<string, TagNode> Children { get; }

         public TagNode(string name, TagNode? parent = null)
         {
            Name = name;
            Parent = parent;
            Children = new Dictionary<string, TagNode>();
         }
      }

      private class GameplayTagSyntaxReceiver : ISyntaxReceiver
      {
         public List<AttributeSyntax> GameplayTagAttributes { get; } = new();

         public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
         {
            if (syntaxNode is AttributeSyntax attributeSyntax &&
                attributeSyntax.Name.ToString() == "GameplayTag" &&
                attributeSyntax.Parent is AttributeListSyntax attributeList &&
                attributeList.Target?.Identifier.Text == "assembly")
            {
               GameplayTagAttributes.Add(attributeSyntax);
            }
         }
      }
   }
}
